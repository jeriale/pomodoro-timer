{"ast":null,"code":"var _jsxFileName = \"/home/jon/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\"; // Components\n\nimport ProgressBar from \"./ProgressBar\";\nimport Durations from \"./Durations\";\nimport TimerControls from \"./TimerControls\";\nimport TimerSettings from \"./TimerSettings\"; // Utilities\n\nimport useInterval from \"../utils/useInterval\";\nconst audioElement = new Audio(`${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`);\n\nfunction Pomodoro() {\n  const initialState = {\n    activeSession: false,\n    timerRunning: false,\n    onBreak: false,\n    // Minutes\n    focusSetting: 25,\n    breakSetting: 5,\n    // Seconds\n    focusElapsed: 298,\n    breakElapsed: 0\n  }; // Set timer data\n\n  const [timerData, setTimerData] = useState({ ...initialState\n  }); // Simplified object variables\n\n  const activeSession = timerData.activeSession;\n  const timerRunning = timerData.timerRunning;\n  const onBreak = timerData.onBreak;\n  const focusSetting = timerData.focusSetting;\n  const breakSetting = timerData.breakSetting;\n  const focusElapsed = timerData.focusElapsed;\n  const breakElapsed = timerData.breakElapsed; // Change timer settings\n\n  const handleTimerSettingChange = ({\n    currentTarget\n  }) => {\n    const type = currentTarget.name;\n    const value = currentTarget.value; // Set limits for Focus and Break timers\n\n    const validatedValue = type === \"focusSetting\" ? Math.min(60, Math.max(parseInt(value), 5)) : Math.min(15, Math.max(parseInt(value), 1));\n    setTimerData({ ...timerData,\n      [type]: validatedValue\n    });\n  }; // Timer play/pause\n\n\n  const playPause = () => {\n    // Create an active session if it doesn't exist\n    if (!activeSession) {\n      setTimerData({ ...timerData,\n        activeSession: true,\n        timerRunning: !timerRunning\n      });\n    } else {\n      setTimerData({ ...timerData,\n        timerRunning: !timerRunning\n      });\n    }\n  }; // Restore timer to default state\n\n\n  const terminateSession = () => {\n    setTimerData({ ...initialState\n    });\n  }; // Add to elapsed time according to session type\n\n\n  useInterval(() => {\n    // Check for 100% progress & switch session type\n    if (focusSetting * 60 === focusElapsed) {\n      audioElement.play();\n      setTimerData({ ...timerData,\n        onBreak: true,\n        focusElapsed: 0\n      });\n    } else if (breakSetting * 60 === breakElapsed) {\n      audioElement.play();\n      setTimerData({ ...timerData,\n        onBreak: false,\n        breakElapsed: 0\n      });\n    } // Less than 100% progress\n    else {\n        if (!onBreak) {\n          setTimerData({ ...timerData,\n            focusElapsed: focusElapsed + 1\n          });\n        } else {\n          setTimerData({ ...timerData,\n            breakElapsed: breakElapsed + 1\n          });\n        }\n      }\n  }, timerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TimerSettings, Object.assign({}, timerData, {\n    changeTimerSetting: handleTimerSettingChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(TimerControls, Object.assign({}, timerData, {\n    playPause: playPause,\n    terminate: terminateSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Durations, Object.assign({}, timerData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(ProgressBar, Object.assign({}, timerData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/home/jon/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","ProgressBar","Durations","TimerControls","TimerSettings","useInterval","audioElement","Audio","process","env","PUBLIC_URL","Pomodoro","initialState","activeSession","timerRunning","onBreak","focusSetting","breakSetting","focusElapsed","breakElapsed","timerData","setTimerData","handleTimerSettingChange","currentTarget","type","name","value","validatedValue","Math","min","max","parseInt","playPause","terminateSession","play"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,MAAMC,YAAY,GAAG,IAAIC,KAAJ,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,gCAApC,CAArB;;AAEA,SAASC,QAAT,GAAoB;AAElB,QAAMC,YAAY,GAAG;AACnBC,IAAAA,aAAa,EAAE,KADI;AAEnBC,IAAAA,YAAY,EAAE,KAFK;AAGnBC,IAAAA,OAAO,EAAE,KAHU;AAInB;AACAC,IAAAA,YAAY,EAAE,EALK;AAMnBC,IAAAA,YAAY,EAAE,CANK;AAOnB;AACAC,IAAAA,YAAY,EAAE,GARK;AASnBC,IAAAA,YAAY,EAAE;AATK,GAArB,CAFkB,CAclB;;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,EAAE,GAAGY;AAAL,GAAD,CAA1C,CAfkB,CAiBlB;;AACA,QAAMC,aAAa,GAAGO,SAAS,CAACP,aAAhC;AACA,QAAMC,YAAY,GAAGM,SAAS,CAACN,YAA/B;AACA,QAAMC,OAAO,GAAGK,SAAS,CAACL,OAA1B;AACA,QAAMC,YAAY,GAAGI,SAAS,CAACJ,YAA/B;AACA,QAAMC,YAAY,GAAGG,SAAS,CAACH,YAA/B;AACA,QAAMC,YAAY,GAAGE,SAAS,CAACF,YAA/B;AACA,QAAMC,YAAY,GAAGC,SAAS,CAACD,YAA/B,CAxBkB,CA0BlB;;AACA,QAAMG,wBAAwB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAuB;AACtD,UAAMC,IAAI,GAAGD,aAAa,CAACE,IAA3B;AACA,UAAMC,KAAK,GAAGH,aAAa,CAACG,KAA5B,CAFsD,CAItD;;AACA,UAAMC,cAAc,GAAGH,IAAI,KAAK,cAAT,GAA0BI,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaD,IAAI,CAACE,GAAL,CAASC,QAAQ,CAACL,KAAD,CAAjB,EAA0B,CAA1B,CAAb,CAA1B,GAAuEE,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaD,IAAI,CAACE,GAAL,CAASC,QAAQ,CAACL,KAAD,CAAjB,EAA0B,CAA1B,CAAb,CAA9F;AAEAL,IAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEX,OAACI,IAAD,GAAQG;AAFG,KAAD,CAAZ;AAID,GAXD,CA3BkB,CAwClB;;;AACA,QAAMK,SAAS,GAAG,MAAM;AACtB;AACA,QAAI,CAACnB,aAAL,EAAoB;AAClBQ,MAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXP,QAAAA,aAAa,EAAE,IAFJ;AAGXC,QAAAA,YAAY,EAAE,CAACA;AAHJ,OAAD,CAAZ;AAKD,KAND,MAMO;AACLO,MAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXN,QAAAA,YAAY,EAAE,CAACA;AAFJ,OAAD,CAAZ;AAID;AACF,GAdD,CAzCkB,CAyDlB;;;AACA,QAAMmB,gBAAgB,GAAG,MAAM;AAC7BZ,IAAAA,YAAY,CAAC,EACX,GAAGT;AADQ,KAAD,CAAZ;AAGD,GAJD,CA1DkB,CAgElB;;;AACAP,EAAAA,WAAW,CACT,MAAM;AACJ;AACA,QAAKW,YAAY,GAAG,EAAhB,KAAwBE,YAA5B,EAA0C;AACxCZ,MAAAA,YAAY,CAAC4B,IAAb;AACAb,MAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXL,QAAAA,OAAO,EAAE,IAFE;AAGXG,QAAAA,YAAY,EAAE;AAHH,OAAD,CAAZ;AAKD,KAPD,MAOO,IAAKD,YAAY,GAAG,EAAhB,KAAwBE,YAA5B,EAA0C;AAC/Cb,MAAAA,YAAY,CAAC4B,IAAb;AACAb,MAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXL,QAAAA,OAAO,EAAE,KAFE;AAGXI,QAAAA,YAAY,EAAE;AAHH,OAAD,CAAZ;AAKD,KAPM,CASP;AATO,SAUF;AACH,YAAI,CAACJ,OAAL,EAAc;AACZM,UAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXF,YAAAA,YAAY,EAAEA,YAAY,GAAG;AAFlB,WAAD,CAAZ;AAID,SALD,MAKO;AACLG,UAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXD,YAAAA,YAAY,EAAEA,YAAY,GAAG;AAFlB,WAAD,CAAZ;AAID;AACF;AACF,GAjCQ,EAkCTL,YAAY,GAAG,IAAH,GAAU,IAlCb,CAAX;AAqCA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD,oBAAmBM,SAAnB;AAA8B,IAAA,kBAAkB,EAAEE,wBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,eAEE,oBAAC,aAAD,oBAAmBF,SAAnB;AAA8B,IAAA,SAAS,EAAEY,SAAzC;AAAoD,IAAA,SAAS,EAAEC,gBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,eAGE,oBAAC,SAAD,oBAAeb,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHF,eAIE,oBAAC,WAAD,oBAAiBA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CADF;AAQD;;AAED,eAAeT,QAAf","sourcesContent":["import React, { useState } from \"react\";\n// Components\nimport ProgressBar from \"./ProgressBar\";\nimport Durations from \"./Durations\";\nimport TimerControls from \"./TimerControls\";\nimport TimerSettings from \"./TimerSettings\";\n// Utilities\nimport useInterval from \"../utils/useInterval\";\n\nconst audioElement = new Audio(`${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`);\n\nfunction Pomodoro() {\n\n  const initialState = {\n    activeSession: false,\n    timerRunning: false,\n    onBreak: false,\n    // Minutes\n    focusSetting: 25,\n    breakSetting: 5,\n    // Seconds\n    focusElapsed: 298,\n    breakElapsed: 0,\n  };\n\n  // Set timer data\n  const [timerData, setTimerData] = useState({ ...initialState });\n\n  // Simplified object variables\n  const activeSession = timerData.activeSession;\n  const timerRunning = timerData.timerRunning;\n  const onBreak = timerData.onBreak;\n  const focusSetting = timerData.focusSetting;\n  const breakSetting = timerData.breakSetting;\n  const focusElapsed = timerData.focusElapsed;\n  const breakElapsed = timerData.breakElapsed;\n\n  // Change timer settings\n  const handleTimerSettingChange = ({ currentTarget }) => {\n    const type = currentTarget.name;\n    const value = currentTarget.value;\n\n    // Set limits for Focus and Break timers\n    const validatedValue = type === \"focusSetting\" ? Math.min(60, Math.max(parseInt(value), 5)) : Math.min(15, Math.max(parseInt(value), 1));\n    \n    setTimerData({\n      ...timerData,\n      [type]: validatedValue,\n    });\n  }\n\n  // Timer play/pause\n  const playPause = () => {\n    // Create an active session if it doesn't exist\n    if (!activeSession) {\n      setTimerData({\n        ...timerData,\n        activeSession: true,\n        timerRunning: !timerRunning\n      });\n    } else {\n      setTimerData({\n        ...timerData,\n        timerRunning: !timerRunning\n      });\n    }\n  }\n\n  // Restore timer to default state\n  const terminateSession = () => {\n    setTimerData({\n      ...initialState\n    });\n  }\n\n  // Add to elapsed time according to session type\n  useInterval(\n    () => {\n      // Check for 100% progress & switch session type\n      if ((focusSetting * 60) === focusElapsed) {\n        audioElement.play();\n        setTimerData({\n          ...timerData,\n          onBreak: true,\n          focusElapsed: 0\n        });\n      } else if ((breakSetting * 60) === breakElapsed) {\n        audioElement.play();\n        setTimerData({\n          ...timerData,\n          onBreak: false,\n          breakElapsed: 0\n        });\n      }\n      \n      // Less than 100% progress\n      else {\n        if (!onBreak) {\n          setTimerData({\n            ...timerData,\n            focusElapsed: focusElapsed + 1\n          });\n        } else {\n          setTimerData({\n            ...timerData,\n            breakElapsed: breakElapsed + 1\n          });\n        }\n      }\n    },\n    timerRunning ? 1000 : null\n  );\n\n  return (\n    <div className=\"pomodoro\">\n      <TimerSettings {...timerData} changeTimerSetting={handleTimerSettingChange} />\n      <TimerControls {...timerData} playPause={playPause} terminate={terminateSession} /> \n      <Durations {...timerData} />\n      <ProgressBar {...timerData} />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}