{"ast":null,"code":"var _jsxFileName = \"/home/jon/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\"; // Components\n\nimport ProgressBar from \"./ProgressBar\";\nimport Durations from \"./Durations\"; // Utilities\n\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from '../utils/duration';\nconst audioElement = new Audio(`${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`);\n\nfunction Pomodoro() {\n  const initialState = {\n    activeSession: false,\n    timerRunning: false,\n    onBreak: false,\n    // Minutes\n    focusSetting: 25,\n    breakSetting: 5,\n    // Seconds\n    focusElapsed: 0,\n    breakElapsed: 0,\n    // Time Format\n    focusTimer: \"\",\n    breakTimer: \"\"\n  }; // Set timer data\n\n  const [timerData, setTimerData] = useState({ ...initialState\n  }); // Simplified object variables\n\n  const activeSession = timerData.activeSession;\n  const timerRunning = timerData.timerRunning;\n  const onBreak = timerData.onBreak;\n  const focusSetting = timerData.focusSetting;\n  const breakSetting = timerData.breakSetting;\n  const focusElapsed = timerData.focusElapsed;\n  const breakElapsed = timerData.breakElapsed; // Change timer settings\n\n  const handleTimerSettingChange = ({\n    currentTarget\n  }) => {\n    const type = currentTarget.name;\n    const value = currentTarget.value; // Set limits for Focus and Break timers\n\n    const validatedValue = type === \"focusSetting\" ? Math.min(60, Math.max(parseInt(value), 5)) : Math.min(15, Math.max(parseInt(value), 1));\n    setTimerData({ ...timerData,\n      [type]: validatedValue\n    });\n  }; // Timer play/pause\n\n\n  const playPause = () => {\n    // Create an active session if it doesn't exist\n    if (!activeSession) {\n      setTimerData({ ...timerData,\n        activeSession: true,\n        timerRunning: !timerRunning\n      });\n    } else {\n      setTimerData({ ...timerData,\n        timerRunning: !timerRunning\n      });\n    }\n  }; // Restore timer to default state\n\n\n  const terminateSession = () => {\n    setTimerData({ ...initialState\n    });\n  }; // Add to elapsed time according to session type\n\n\n  useInterval(() => {\n    // Check for 100% progress\n    if (focusSetting * 60 === focusElapsed) {\n      playAudio();\n      setTimerData({ ...timerData,\n        onBreak: true,\n        focusElapsed: 0\n      });\n    } else if (breakSetting * 60 === breakElapsed) {\n      playAudio();\n      setTimerData({ ...timerData,\n        onBreak: false,\n        breakElapsed: 0\n      });\n    } // Less than 100% progress\n    else {\n        if (!onBreak) {\n          setTimerData({ ...timerData,\n            focusElapsed: focusElapsed + 1\n          });\n        } else {\n          setTimerData({ ...timerData,\n            breakElapsed: breakElapsed + 1\n          });\n        }\n      }\n  }, timerRunning ? 1000 : null);\n\n  async function playAudio() {\n    try {\n      await audioElement.play();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !timerRunning,\n      \"oi-media-pause\": timerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  })), activeSession ? /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    title: \"Stop the session\",\n    onClick: terminateSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  })) : null))), activeSession ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Durations, Object.assign({}, timerData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ProgressBar, Object.assign({}, timerData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }))) : null);\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/home/jon/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","ProgressBar","Durations","classNames","useInterval","minutesToDuration","audioElement","Audio","process","env","PUBLIC_URL","Pomodoro","initialState","activeSession","timerRunning","onBreak","focusSetting","breakSetting","focusElapsed","breakElapsed","focusTimer","breakTimer","timerData","setTimerData","handleTimerSettingChange","currentTarget","type","name","value","validatedValue","Math","min","max","parseInt","playPause","terminateSession","playAudio","play","error","console","log","oi"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n// Components\nimport ProgressBar from \"./ProgressBar\";\nimport Durations from \"./Durations\";\n// Utilities\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from '../utils/duration';\n\n\nconst audioElement = new Audio(`${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`);\n\nfunction Pomodoro() {\n\n  const initialState = {\n    activeSession: false,\n    timerRunning: false,\n    onBreak: false,\n    // Minutes\n    focusSetting: 25,\n    breakSetting: 5,\n    // Seconds\n    focusElapsed: 0,\n    breakElapsed: 0,\n    // Time Format\n    focusTimer: \"\",\n    breakTimer: \"\"\n  };\n\n  // Set timer data\n  const [timerData, setTimerData] = useState({ ...initialState });\n\n  // Simplified object variables\n  const activeSession = timerData.activeSession;\n  const timerRunning = timerData.timerRunning;\n  const onBreak = timerData.onBreak;\n  const focusSetting = timerData.focusSetting;\n  const breakSetting = timerData.breakSetting;\n  const focusElapsed = timerData.focusElapsed;\n  const breakElapsed = timerData.breakElapsed;\n\n  // Change timer settings\n  const handleTimerSettingChange = ({ currentTarget }) => {\n    const type = currentTarget.name;\n    const value = currentTarget.value;\n\n    // Set limits for Focus and Break timers\n    const validatedValue = type === \"focusSetting\" ? Math.min(60, Math.max(parseInt(value), 5)) : Math.min(15, Math.max(parseInt(value), 1));\n    \n    setTimerData({\n      ...timerData,\n      [type]: validatedValue,\n    });\n  }\n\n  // Timer play/pause\n  const playPause = () => {\n    // Create an active session if it doesn't exist\n    if (!activeSession) {\n      setTimerData({\n        ...timerData,\n        activeSession: true,\n        timerRunning: !timerRunning\n      });\n    } else {\n      setTimerData({\n        ...timerData,\n        timerRunning: !timerRunning\n      });\n    }\n  }\n\n  // Restore timer to default state\n  const terminateSession = () => {\n    setTimerData({\n      ...initialState\n    });\n  }\n\n  // Add to elapsed time according to session type\n  useInterval(\n    () => {\n      // Check for 100% progress\n      if ((focusSetting * 60) === focusElapsed) {\n        playAudio();\n        setTimerData({\n          ...timerData,\n          onBreak: true,\n          focusElapsed: 0\n        });\n      } else if ((breakSetting * 60) === breakElapsed) {\n        playAudio();\n        setTimerData({\n          ...timerData,\n          onBreak: false,\n          breakElapsed: 0\n        });\n      }\n      \n      // Less than 100% progress\n      else {\n        if (!onBreak) {\n          setTimerData({\n            ...timerData,\n            focusElapsed: focusElapsed + 1\n          });\n        } else {\n          setTimerData({\n            ...timerData,\n            breakElapsed: breakElapsed + 1\n          });\n        }\n      }\n    },\n    timerRunning ? 1000 : null\n  );\n\n  async function playAudio() {\n    try {\n      await audioElement.play();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className=\"pomodoro\">\n\n\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !timerRunning,\n                  \"oi-media-pause\": timerRunning,\n                })}\n              />\n            </button>\n            {activeSession ? (\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              onClick={terminateSession}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n            ) : ( null )}\n          </div>\n        </div>\n      </div>\n      {activeSession ? (\n      <div>\n        <Durations {...timerData} />\n        <ProgressBar {...timerData} />\n      </div>\n      ) : ( null )}\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}