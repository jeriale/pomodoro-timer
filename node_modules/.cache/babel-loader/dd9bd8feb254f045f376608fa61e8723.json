{"ast":null,"code":"import _defineProperty from\"/home/jon/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/jon/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/jon/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";// Components\nimport ProgressBar from\"./ProgressBar\";import Durations from\"./Durations\";import TimerControls from\"./TimerControls\";import TimerSettings from\"./TimerSettings\";// Utilities\nimport useInterval from\"../utils/useInterval\";function Pomodoro(){var audioElement=document.getElementsByClassName(\"audio-element\")[0];var initialState={activeSession:false,timerRunning:false,onBreak:false,// Minutes\nfocusSetting:25,breakSetting:5,// Seconds\nfocusElapsed:0,breakElapsed:0};// Set timer data\nvar _useState=useState(_objectSpread({},initialState)),_useState2=_slicedToArray(_useState,2),timerData=_useState2[0],setTimerData=_useState2[1];// Simplified object variables\nvar activeSession=timerData.activeSession;var timerRunning=timerData.timerRunning;var onBreak=timerData.onBreak;var focusSetting=timerData.focusSetting;var breakSetting=timerData.breakSetting;var focusElapsed=timerData.focusElapsed;var breakElapsed=timerData.breakElapsed;// Change timer settings\nvar handleTimerSettingChange=function handleTimerSettingChange(_ref){var currentTarget=_ref.currentTarget;var type=currentTarget.name;var value=currentTarget.value;// Set limits for Focus and Break timers\nvar validatedValue=type===\"focusSetting\"?Math.min(60,Math.max(parseInt(value),5)):Math.min(15,Math.max(parseInt(value),1));setTimerData(_objectSpread(_objectSpread({},timerData),{},_defineProperty({},type,validatedValue)));};// Timer play/pause\nvar playPause=function playPause(){// Create an active session if it doesn't exist\nif(!activeSession){setTimerData(_objectSpread(_objectSpread({},timerData),{},{activeSession:true,timerRunning:!timerRunning}));}else{setTimerData(_objectSpread(_objectSpread({},timerData),{},{timerRunning:!timerRunning}));}};// Restore timer to default state\nvar terminateSession=function terminateSession(){setTimerData(_objectSpread({},initialState));};// Add to elapsed time according to session type\nuseInterval(function(){// Check for 100% progress & switch session type\nif(focusSetting*60===focusElapsed){audioElement.play();setTimerData(_objectSpread(_objectSpread({},timerData),{},{onBreak:true,focusElapsed:0}));}else if(breakSetting*60===breakElapsed){audioElement.play();setTimerData(_objectSpread(_objectSpread({},timerData),{},{onBreak:false,breakElapsed:0}));}// Less than 100% progress\nelse{if(!onBreak){setTimerData(_objectSpread(_objectSpread({},timerData),{},{focusElapsed:focusElapsed+1}));}else{setTimerData(_objectSpread(_objectSpread({},timerData),{},{breakElapsed:breakElapsed+1}));}}},timerRunning?1000:null);return/*#__PURE__*/React.createElement(\"div\",{className:\"pomodoro\"},/*#__PURE__*/React.createElement(TimerSettings,Object.assign({},timerData,{changeTimerSetting:handleTimerSettingChange})),/*#__PURE__*/React.createElement(TimerControls,Object.assign({},timerData,{playPause:playPause,terminate:terminateSession})),/*#__PURE__*/React.createElement(Durations,timerData),/*#__PURE__*/React.createElement(ProgressBar,timerData),/*#__PURE__*/React.createElement(\"audio\",{className:\"audio-element\"},/*#__PURE__*/React.createElement(\"source\",{src:\"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\"})));}export default Pomodoro;","map":{"version":3,"sources":["/home/jon/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","ProgressBar","Durations","TimerControls","TimerSettings","useInterval","Pomodoro","audioElement","document","getElementsByClassName","initialState","activeSession","timerRunning","onBreak","focusSetting","breakSetting","focusElapsed","breakElapsed","timerData","setTimerData","handleTimerSettingChange","currentTarget","type","name","value","validatedValue","Math","min","max","parseInt","playPause","terminateSession","play"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n// Components\nimport ProgressBar from \"./ProgressBar\";\nimport Durations from \"./Durations\";\nimport TimerControls from \"./TimerControls\";\nimport TimerSettings from \"./TimerSettings\";\n// Utilities\nimport useInterval from \"../utils/useInterval\";\n\nfunction Pomodoro() {\n\n  const audioElement = document.getElementsByClassName(\"audio-element\")[0];\n\n  const initialState = {\n    activeSession: false,\n    timerRunning: false,\n    onBreak: false,\n    // Minutes\n    focusSetting: 25,\n    breakSetting: 5,\n    // Seconds\n    focusElapsed: 0,\n    breakElapsed: 0,\n  };\n\n  // Set timer data\n  const [timerData, setTimerData] = useState({ ...initialState });\n\n  // Simplified object variables\n  const activeSession = timerData.activeSession;\n  const timerRunning = timerData.timerRunning;\n  const onBreak = timerData.onBreak;\n  const focusSetting = timerData.focusSetting;\n  const breakSetting = timerData.breakSetting;\n  const focusElapsed = timerData.focusElapsed;\n  const breakElapsed = timerData.breakElapsed;\n\n  // Change timer settings\n  const handleTimerSettingChange = ({ currentTarget }) => {\n    const type = currentTarget.name;\n    const value = currentTarget.value;\n\n    // Set limits for Focus and Break timers\n    const validatedValue = type === \"focusSetting\" ? Math.min(60, Math.max(parseInt(value), 5)) : Math.min(15, Math.max(parseInt(value), 1));\n    \n    setTimerData({\n      ...timerData,\n      [type]: validatedValue,\n    });\n  }\n\n  // Timer play/pause\n  const playPause = () => {\n    // Create an active session if it doesn't exist\n    if (!activeSession) {\n      setTimerData({\n        ...timerData,\n        activeSession: true,\n        timerRunning: !timerRunning\n      });\n    } else {\n      setTimerData({\n        ...timerData,\n        timerRunning: !timerRunning\n      });\n    }\n  }\n\n  // Restore timer to default state\n  const terminateSession = () => {\n    setTimerData({\n      ...initialState\n    });\n  }\n\n  // Add to elapsed time according to session type\n  useInterval(\n    () => {\n      // Check for 100% progress & switch session type\n      if ((focusSetting * 60) === focusElapsed) {\n        audioElement.play();\n        setTimerData({\n          ...timerData,\n          onBreak: true,\n          focusElapsed: 0\n        });\n      } else if ((breakSetting * 60) === breakElapsed) {\n        audioElement.play();\n        setTimerData({\n          ...timerData,\n          onBreak: false,\n          breakElapsed: 0\n        });\n      }\n      \n      // Less than 100% progress\n      else {\n        if (!onBreak) {\n          setTimerData({\n            ...timerData,\n            focusElapsed: focusElapsed + 1\n          });\n        } else {\n          setTimerData({\n            ...timerData,\n            breakElapsed: breakElapsed + 1\n          });\n        }\n      }\n    },\n    timerRunning ? 1000 : null\n  );\n\n  return (\n    <div className=\"pomodoro\">\n      <TimerSettings {...timerData} changeTimerSetting={handleTimerSettingChange} />\n      <TimerControls {...timerData} playPause={playPause} terminate={terminateSession} /> \n      <Durations {...timerData} />\n      <ProgressBar {...timerData} />\n      <audio className=\"audio-element\">\n        <source src=\"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\"></source>\n      </audio>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}